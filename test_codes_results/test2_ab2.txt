|0001|  void main( ) {
                [0001, 0000] (0010,      tVoid) {void}
        FuncTypes ->  tVoid
                [0001, 0005] (0008,       main) {main}
                [0001, 0009] (0037, paramStart) {(}
                [0001, 0011] (0038,   paramEnd) {)}
                [0001, 0013] (0035,   escStart) {{}
|0002|  string project_name <- "project_name";
                [0002, 0001] (0015,    tString) {string}
        VariableTypes ->  tString
        Type ->  VariableTypes
                [0002, 0008] (0009,         id) {project_name}
                [0002, 0021] (0050,    opAtrib) {<-}
                [0002, 0024] (0074, tLitString) {"project_name"}
        StringConst ->  tLitString
        Consts ->  StringConst
        ExpressionEnd ->  Consts
        ExpressionNeg ->  ExpressionEnd
        ExpressionMult ->  ExpressionNeg
        ExpressionAdd ->  ExpressionMult
        ExpressionRel ->  ExpressionAdd
        ExpressionAnd ->  ExpressionRel
        ExpressionOr ->  ExpressionAnd
        Expression ->  ExpressionOr
                [0002, 0038] (0040,       term) {;}
        VarDecl ->  Type id opAtrib Expression term
|0003|  repository github_project -> collect_data(project_name);
                [0003, 0001] (0015,    tString) {repository}
        VariableTypes ->  tString
        Type ->  VariableTypes
                [0003, 0012] (0009,         id) {github_project}
                [0003, 0027] (0062,   opAccess) {->}
                [0003, 0030] (0068, fCollectData) {collect_data}
        FuncName ->  fCollectData
                [0003, 0042] (0037, paramStart) {(}
                [0003, 0043] (0009,         id) {project_name}
        Var ->  id
        ListIds ->  Var
                [0003, 0055] (0038,   paramEnd) {)}
        FuncCall ->  paramStart ListIds paramEnd
        FuncAccess ->  FuncName FuncCall
        Var ->  FuncAccess
        ExpressionEnd ->  Var
        ExpressionNeg ->  ExpressionEnd
        ExpressionMult ->  ExpressionNeg
        ExpressionAdd ->  ExpressionMult
        ExpressionRel ->  ExpressionAdd
        ExpressionAnd ->  ExpressionRel
        ExpressionOr ->  ExpressionAnd
        Expression ->  ExpressionOr
                [0003, 0056] (0040,       term) {;}
        VarDecl ->  Type id opAccess Expression term
|0004|  commits project_commits <- github_project -> commit_list;
                [0004, 0001] (0020,   tCommits) {commits}
        ListTypes ->  tCommits
        Type ->  ListTypes
                [0004, 0009] (0009,         id) {project_commits}
                [0004, 0025] (0050,    opAtrib) {<-}
                [0004, 0028] (0009,         id) {github_project}
                [0004, 0043] (0062,   opAccess) {->}
                [0004, 0046] (0009,         id) {commit_list}
        Var ->  id opAccess id
        ExpressionEnd ->  Var
        ExpressionNeg ->  ExpressionEnd
        ExpressionMult ->  ExpressionNeg
        ExpressionAdd ->  ExpressionMult
        ExpressionRel ->  ExpressionAdd
        ExpressionAnd ->  ExpressionRel
        ExpressionOr ->  ExpressionAnd
        Expression ->  ExpressionOr
                [0004, 0057] (0040,       term) {;}
        VarDecl ->  Type id opAtrib Expression term
|0006|  foreach commit_1 in project_commits {
                [0006, 0001] (0048,      prFor) {foreach}
                [0006, 0009] (0009,         id) {commit_1}
                [0006, 0018] (0042,         in) {in}
                [0006, 0021] (0009,         id) {project_commits}
                [0006, 0037] (0035,   escStart) {{}
|0008|  if (commit_1 -> id greater 2){
                [0008, 0002] (0045,       prIf) {if}
                [0008, 0005] (0037, paramStart) {(}
                [0008, 0006] (0009,         id) {commit_1}
                [0008, 0015] (0062,   opAccess) {->}
                [0008, 0018] (0009,         id) {id}
        Var ->  id opAccess id
        ExpressionEnd ->  Var
        ExpressionNeg ->  ExpressionEnd
        ExpressionMult ->  ExpressionNeg
        ExpressionAdd ->  ExpressionMult
        ExpressionRel ->  ExpressionAdd
                [0008, 0021] (0058,     opRel1) {greater}
                [0008, 0029] (0075,    tLitInt) {2}
        NumConst ->  tLitInt
        Consts ->  NumConst
        ExpressionEnd ->  Consts
        ExpressionNeg ->  ExpressionEnd
        ExpressionMult ->  ExpressionNeg
        ExpressionAdd ->  ExpressionMult
        ExpressionRel ->  ExpressionRel opRel1 ExpressionAdd
        ExpressionAnd ->  ExpressionRel
        ExpressionOr ->  ExpressionAnd
        Expression ->  ExpressionOr
                [0008, 0030] (0038,   paramEnd) {)}
        ExpressionEnd ->  paramStart Expression paramEnd
        ExpressionNeg ->  ExpressionEnd
        ExpressionMult ->  ExpressionNeg
        ExpressionAdd ->  ExpressionMult
        ExpressionRel ->  ExpressionAdd
        ExpressionAnd ->  ExpressionRel
        ExpressionOr ->  ExpressionAnd
        Expression ->  ExpressionOr
                [0008, 0031] (0035,   escStart) {{}
|0010|  print("This is America.");
                [0010, 0003] (0044,    prWrite) {print}
                [0010, 0008] (0037, paramStart) {(}
                [0010, 0009] (0074, tLitString) {"This is America."}
        StringConst ->  tLitString
        Consts ->  StringConst
        ExpressionEnd ->  Consts
        ExpressionNeg ->  ExpressionEnd
        ExpressionMult ->  ExpressionNeg
        ExpressionAdd ->  ExpressionMult
        ExpressionRel ->  ExpressionAdd
        ExpressionAnd ->  ExpressionRel
        ExpressionOr ->  ExpressionAnd
        Expression ->  ExpressionOr
                [0010, 0027] (0038,   paramEnd) {)}
        ExpressionEnd ->  paramStart Expression paramEnd
        ExpressionNeg ->  ExpressionEnd
        ExpressionMult ->  ExpressionNeg
        ExpressionAdd ->  ExpressionMult
        ExpressionRel ->  ExpressionAdd
        ExpressionAnd ->  ExpressionRel
        ExpressionOr ->  ExpressionAnd
        Expression ->  ExpressionOr
                [0010, 0028] (0040,       term) {;}
        Command ->  prWrite Expression term
|0012|  }
                [0012, 0002] (0036,     escEnd) {}}
        BodyPart ->  escEnd
        BodyPart ->  Command BodyPart
        Body ->  escStart BodyPart
        Command ->  prIf Expression Body
|0014|  }
                [0014, 0001] (0036,     escEnd) {}}
        BodyPart ->  escEnd
        BodyPart ->  Command BodyPart
        Body ->  escStart BodyPart
        Command ->  prFor id in id Body
|0016|  }
                [0016, 0000] (0036,     escEnd) {}}
        BodyPart ->  escEnd
        BodyPart ->  Command BodyPart
        BodyPart ->  VarDecl BodyPart
        BodyPart ->  VarDecl BodyPart
        BodyPart ->  VarDecl BodyPart
        Body ->  escStart BodyPart
        Code ->  FuncTypes main paramStart paramEnd Body
---------- Code Accepted ----------
